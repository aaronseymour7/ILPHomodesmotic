#!/usr/bin/env python3

import sys
import argparse
from rdkit import Chem
from rdkit.Chem import AllChem
from AaronTools.geometry import Geometry
from AaronTools.atoms import Atom
from AaronTools.theory import Theory, OptimizationJob, FrequencyJob
import Reactions
from Reactions import Homodesmotic, Isodesmic, Isogyric, Hypohomodesmotic

def geom_from_rdkit(rdkitmol):
    """
    Takes an RDKit molecule (already embedded) and returns an AaronTools Geometry along with
    the weighted adjacency matrix
    """
    result = AllChem.EmbedMolecule(rdkitmol)
    if result != 0:
        raise ValueError("Embedding failed")
        
    atom_list = []
    for i, atom in enumerate(rdkitmol.GetAtoms()):
        positions = rdkitmol.GetConformer().GetAtomPosition(i)
        atom_list.append(Atom(element=atom.GetSymbol(), coords=positions))
    return Geometry(atom_list)
method = Theory(
    method="B3LYP",
    basis="def2-SVP",
    job_type=[OptimizationJob(), FrequencyJob()]
)

def parse_smiles_list(arg):
    if isinstance(arg, list):
        smiles_list = []
        for item in arg:
            if ',' in item:
                smiles_list.extend(item.split(','))
            else:
                smiles_list.append(item)
    else:
        smiles_list = arg.split(',') if ',' in arg else [arg]

    mols = []
    for smi in smiles_list:
        mol = Chem.MolFromSmiles(smi)
        if mol is None:
            raise argparse.ArgumentTypeError(f"Invalid SMILES: {smi}")
        mols.append(mol)
    return mols
reaction_map = {
    "homodesmotic": Homodesmotic,
    "isodesmic": Isodesmic,
    "isogyric": Isogyric,
    "hypohomodesmotic": Hypohomodesmotic,
}
# Argument parsing
parser = argparse.ArgumentParser(description="Run reaction balancing (e.g. Homodesmotic, Isodesmic, etc.)")
parser.add_argument("reaction_type", choices=reaction_map.keys(), help="Type of reaction")
parser.add_argument("input", type=str, help="Input molecule SMILES")

# Optional arguments for LHS, RHS, Substruct, and Replacement
parser.add_argument("--lhs", nargs="+", type=str, help="LHS required molecules (SMILES or comma-separated list)")
parser.add_argument("--rhs", nargs="+", type=str, help="RHS required molecules (SMILES or comma-separated list)")
parser.add_argument("--substruct", nargs="+", type=str, help="Substructures to replace (SMILES or list)")
parser.add_argument("--replacement", nargs="+", type=str, help="Replacement structures (SMILES or list)")

args = parser.parse_args()

# Convert the input SMILES to a Mol object
input_smiles = str(args.input)  # Ensure input is a string
input_mol = Chem.AddHs(Chem.MolFromSmiles(input_smiles))
if input_mol is None:
    raise argparse.ArgumentTypeError(f"Invalid SMILES: {args.input}")

# Parse optional arguments (LHS, RHS, etc.)
lhs_required = parse_smiles_list(args.lhs) if args.lhs else None
rhs_required = parse_smiles_list(args.rhs) if args.rhs else None
Substruct = parse_smiles_list(args.substruct) if args.substruct else None
Replacement = parse_smiles_list(args.replacement) if args.replacement else None

reaction_fn = reaction_map[args.reaction_type.lower()] 
rhs, lhs, status = reaction_fn(input_mol, lhs_required, rhs_required, Substruct, Replacement)



if status == 'Optimal':
    Li = 1
    Ri = 1
    for mol, coeff in lhs:
        geom = geom_from_rdkit(mol)
        outfile = f"R{Li}_{coeff}.com"
        geom.write(outfile=outfile, theory=method)
        Li+=1
    for mol, coeff in rhs:
        geom = geom_from_rdkit(mol)
        outfile = f"P{Ri}_{coeff}.com"
        geom.write(outfile=outfile, theory=method)
        Ri+=1
    print("Complete")
else:
    print("Infeasible")
